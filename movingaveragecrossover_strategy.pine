// This Pine Script was automatically generated by AI Trading Strategy Optimization System
// Strategy: MovingAverageCrossover
// Template: Moving Average Crossover
// Generated: 2025-05-28 23:55:14
// 
// DISCLAIMER: This is an automated strategy conversion. Please review and test thoroughly
// before using with real capital. Past performance does not guarantee future results.

//@version=5
strategy(
    title="MovingAverageCrossover - Optimized Strategy",
    shorttitle="MovingAverageCrossov",
    overlay=false,
    initial_capital=100000.0,
    default_qty_type=strategy.percent_of_equity,
    default_qty_value=100.0,
    commission_type=strategy.commission.percent,
    commission_value=0.1,
    slippage=3,
    precision=4
)

// === INPUT PARAMETERS ===
fast_period = input.int(12, "Fast MA Period", tooltip="Period for fast moving average", minval=1, maxval=200, step=1, group="Moving Average")
slow_period = input.int(26, "Slow MA Period", tooltip="Period for slow moving average", minval=1, maxval=500, step=1, group="Moving Average")
signal_threshold = input.float(0.02, "Signal Threshold", tooltip="Minimum signal strength threshold", minval=0.0, maxval=1.0, step=0.01, group="Signals")
stop_loss_pct = input.float(2.0, "Stop Loss %", minval=0.1, maxval=10.0, step=0.1, group="Risk Management")
take_profit_pct = input.float(4.0, "Take Profit %", minval=0.1, maxval=20.0, step=0.1, group="Risk Management")
position_size_pct = input.float(100.0, "Position Size %", minval=1.0, maxval=100.0, step=1.0, group="Risk Management")

// === INDICATOR CALCULATIONS ===
// Fast Moving Average (12 periods)
fast_ma = ta.sma(close, 12)
// Slow Moving Average (26 periods)
slow_ma = ta.sma(close, 26)
// Signal strength as percentage difference
signal_strength = math.abs(fast_ma - slow_ma) / slow_ma

// === TRADING SIGNALS ===
// Fast MA crosses above slow MA with strength > 2.0%
long_entry = ta.crossover(fast_ma, slow_ma) and signal_strength > 0.02
// Fast MA crosses below slow MA
long_exit = ta.crossunder(fast_ma, slow_ma)
// Fast MA crosses below slow MA with strength > 2.0%
short_entry = ta.crossunder(fast_ma, slow_ma) and signal_strength > 0.02
// Fast MA crosses above slow MA
short_exit = ta.crossover(fast_ma, slow_ma)

// === STRATEGY LOGIC ===
if (long_entry)
    strategy.entry("Long", strategy.long, qty=position_size_pct/100 * strategy.equity / close)
if (long_exit)
    strategy.close("Long")
if (short_entry)
    strategy.entry("Short", strategy.short, qty=position_size_pct/100 * strategy.equity / close)
if (short_exit)
    strategy.close("Short")

// === RISK MANAGEMENT ===
// Stop loss and take profit
if (strategy.position_size > 0)  // Long position
    strategy.exit("Long SL/TP", "Long", stop=close * (1 - stop_loss_pct/100), limit=close * (1 + take_profit_pct/100))
if (strategy.position_size < 0)  // Short position
    strategy.exit("Short SL/TP", "Short", stop=close * (1 + stop_loss_pct/100), limit=close * (1 - take_profit_pct/100))

// === VISUALIZATION ===
plot(fast_ma, title="Fast Moving Average (12 periods)", color=color.blue)
plot(slow_ma, title="Slow Moving Average (26 periods)", color=color.red)
plotshape(long_entry, title="Long Entry", location=location.belowbar, style=shape.triangleup, size=size.small, color=color.green)
plotshape(short_entry, title="Short Entry", location=location.abovebar, style=shape.triangledown, size=size.small, color=color.red)

// === ALERT CONDITIONS ===
alertcondition(long_entry, title="BUY Signal", message="BUY: Fast MA crosses above slow MA with strength > 2.0%")
alertcondition(short_entry, title="SELL Signal", message="SELL: Fast MA crosses below slow MA with strength > 2.0%")

// === DEBUGGING & PERFORMANCE ===
// Performance table
if barstate.islast
    var table perfTable = table.new(position.top_right, 2, 8, bgcolor=color.white, border_width=1)
    table.cell(perfTable, 0, 0, "Metric", text_color=color.black, bgcolor=color.gray)
    table.cell(perfTable, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)
    table.cell(perfTable, 0, 1, "Total Trades", text_color=color.black)
    table.cell(perfTable, 1, 1, str.tostring(strategy.closedtrades), text_color=color.black)
    table.cell(perfTable, 0, 2, "Win Rate", text_color=color.black)
    table.cell(perfTable, 1, 2, str.tostring(strategy.wintrades / strategy.closedtrades * 100, "#.##") + "%", text_color=color.black)
    table.cell(perfTable, 0, 3, "Profit Factor", text_color=color.black)
    table.cell(perfTable, 1, 3, str.tostring(strategy.grossprofit / strategy.grossloss, "#.##"), text_color=color.black)
    table.cell(perfTable, 0, 4, "Net Profit", text_color=color.black)
    table.cell(perfTable, 1, 4, str.tostring(strategy.netprofit, "#.##"), text_color=color.black)
// Parameter validation
if barstate.islast and strategy.closedtrades == 0
    runtime.error("No trades generated. Check parameters and market conditions.")