// This Pine Script was automatically generated by AI Trading Strategy Optimization System
// Strategy: RSIStrategy
// Template: RSI Strategy
// Generated: 2025-05-28 23:46:25
// 
// DISCLAIMER: This is an automated strategy conversion. Please review and test thoroughly
// before using with real capital. Past performance does not guarantee future results.

//@version=5
strategy(
    title="RSIStrategy - Optimized Strategy",
    shorttitle="RSIStrategy",
    overlay=true,
    initial_capital=100000.0,
    default_qty_type=strategy.percent_of_equity,
    default_qty_value=100.0,
    commission_type=strategy.commission.percent,
    commission_value=0.1,
    slippage=3,
    precision=4
)

// === INPUT PARAMETERS ===
rsi_period = input.int(14, "RSI Period", tooltip="Period for RSI calculation", minval=1, maxval=100, step=1, group="RSI")
rsi_overbought = input.float(70, "RSI Overbought", tooltip="RSI overbought threshold", minval=50.0, maxval=100.0, step=1.0, group="RSI")
rsi_oversold = input.float(30, "RSI Oversold", tooltip="RSI oversold threshold", minval=0.0, maxval=50.0, step=1.0, group="RSI")
stop_loss_pct = input.float(2.0, "Stop Loss %", minval=0.1, maxval=10.0, step=0.1, group="Risk Management")
take_profit_pct = input.float(4.0, "Take Profit %", minval=0.1, maxval=20.0, step=0.1, group="Risk Management")
position_size_pct = input.float(100.0, "Position Size %", minval=1.0, maxval=100.0, step=1.0, group="Risk Management")

// === INDICATOR CALCULATIONS ===
// RSI (14 periods)
rsi = ta.rsi(close, 14)
// RSI smoothed (2 periods)
rsi_ma = ta.sma(rsi, 2)

// === TRADING SIGNALS ===
// RSI crosses above 30 (oversold recovery)
long_entry = ta.crossover(rsi, 30) and rsi_ma < 35
// RSI crosses below 70 (profit taking)
long_exit = ta.crossunder(rsi, 70)
// RSI crosses below 70 (overbought reversal)
short_entry = ta.crossunder(rsi, 70) and rsi_ma > 65
// RSI crosses above 30 (cover shorts)
short_exit = ta.crossover(rsi, 30)

// === STRATEGY LOGIC ===
if (long_entry)
    strategy.entry("Long", strategy.long, qty=position_size_pct/100 * strategy.equity / close)
if (long_exit)
    strategy.close("Long")
if (short_entry)
    strategy.entry("Short", strategy.short, qty=position_size_pct/100 * strategy.equity / close)
if (short_exit)
    strategy.close("Short")

// === RISK MANAGEMENT ===
// Stop loss and take profit
if (strategy.position_size > 0)  // Long position
    strategy.exit("Long SL/TP", "Long", stop=close * (1 - stop_loss_pct/100), limit=close * (1 + take_profit_pct/100))
if (strategy.position_size < 0)  // Short position
    strategy.exit("Short SL/TP", "Short", stop=close * (1 + stop_loss_pct/100), limit=close * (1 - take_profit_pct/100))

// === VISUALIZATION ===
plot(rsi, title="RSI (14 periods)", color=color.purple)
plot(rsi_ma, title="RSI smoothed (2 periods)", color=color.orange)
plotshape(long_entry, title="Long Entry", location=location.belowbar, style=shape.triangleup, size=size.small, color=color.green)
plotshape(short_entry, title="Short Entry", location=location.abovebar, style=shape.triangledown, size=size.small, color=color.red)

// === ALERT CONDITIONS ===
alertcondition(long_entry, title="BUY Signal", message="BUY: RSI crosses above 30 (oversold recovery)")
alertcondition(short_entry, title="SELL Signal", message="SELL: RSI crosses below 70 (overbought reversal)")

// === DEBUGGING & PERFORMANCE ===
// Performance table
if barstate.islast
    var table perfTable = table.new(position.top_right, 2, 8, bgcolor=color.white, border_width=1)
    table.cell(perfTable, 0, 0, "Metric", text_color=color.black, bgcolor=color.gray)
    table.cell(perfTable, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)
    table.cell(perfTable, 0, 1, "Total Trades", text_color=color.black)
    table.cell(perfTable, 1, 1, str.tostring(strategy.closedtrades), text_color=color.black)
    table.cell(perfTable, 0, 2, "Win Rate", text_color=color.black)
    table.cell(perfTable, 1, 2, str.tostring(strategy.wintrades / strategy.closedtrades * 100, "#.##") + "%", text_color=color.black)
    table.cell(perfTable, 0, 3, "Profit Factor", text_color=color.black)
    table.cell(perfTable, 1, 3, str.tostring(strategy.grossprofit / strategy.grossloss, "#.##"), text_color=color.black)
    table.cell(perfTable, 0, 4, "Net Profit", text_color=color.black)
    table.cell(perfTable, 1, 4, str.tostring(strategy.netprofit, "#.##"), text_color=color.black)
// Parameter validation
if barstate.islast and strategy.closedtrades == 0
    runtime.error("No trades generated. Check parameters and market conditions.")