apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: hyperopt-production
  labels:
    app: hyperopt-platform
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'hyperopt-production'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      # Kubernetes Pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      # HyperOpt API
      - job_name: 'hyperopt-api'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - hyperopt-production
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_component]
            action: keep
            regex: api
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep
            regex: metrics

      # HyperOpt Workers
      - job_name: 'hyperopt-workers'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - hyperopt-production
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_component]
            action: keep
            regex: worker.*
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep
            regex: metrics

      # HyperOpt Scheduler
      - job_name: 'hyperopt-scheduler'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - hyperopt-production
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_component]
            action: keep
            regex: scheduler
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep
            regex: metrics

      # PostgreSQL Exporter
      - job_name: 'postgres-exporter'
        static_configs:
          - targets: ['postgres-exporter:9187']
        metrics_path: /metrics

      # Redis Exporter
      - job_name: 'redis-exporter'
        static_configs:
          - targets: ['redis-exporter:9121']
        metrics_path: /metrics

      # Node Exporter
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoints_name]
            action: keep
            regex: node-exporter
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http-metrics

      # cAdvisor (Container metrics)
      - job_name: 'kubernetes-cadvisor'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      # Blackbox Exporter for endpoint monitoring
      - job_name: 'blackbox'
        metrics_path: /probe
        params:
          module: [http_2xx]
        static_configs:
          - targets:
            - https://api.hyperopt.company/health
            - https://app.hyperopt.company
            - https://grafana.hyperopt.company
        relabel_configs:
          - source_labels: [__address__]
            target_label: __param_target
          - source_labels: [__param_target]
            target_label: instance
          - target_label: __address__
            replacement: blackbox-exporter:9115

  # Recording Rules
  recording_rules.yml: |
    groups:
      - name: hyperopt.optimization.rules
        interval: 30s
        rules:
          - record: hyperopt:optimization_rate_5m
            expr: rate(hyperopt_optimizations_total[5m])
          
          - record: hyperopt:optimization_success_rate_5m
            expr: rate(hyperopt_optimizations_successful_total[5m]) / rate(hyperopt_optimizations_total[5m])
          
          - record: hyperopt:optimization_duration_p95
            expr: histogram_quantile(0.95, rate(hyperopt_optimization_duration_seconds_bucket[5m]))
          
          - record: hyperopt:active_workers
            expr: sum(up{job="hyperopt-workers"})
          
          - record: hyperopt:queue_length
            expr: sum(hyperopt_celery_queue_length)

      - name: hyperopt.infrastructure.rules
        interval: 30s
        rules:
          - record: hyperopt:cpu_utilization
            expr: (1 - rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100
          
          - record: hyperopt:memory_utilization
            expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100
          
          - record: hyperopt:disk_utilization
            expr: (1 - (node_filesystem_avail_bytes{fstype!="tmpfs"} / node_filesystem_size_bytes{fstype!="tmpfs"})) * 100
          
          - record: hyperopt:api_response_time_p95
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="hyperopt-api"}[5m]))
          
          - record: hyperopt:api_error_rate
            expr: rate(http_requests_total{job="hyperopt-api",status=~"5.."}[5m]) / rate(http_requests_total{job="hyperopt-api"}[5m])

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: hyperopt-production
  labels:
    app: hyperopt-platform
    component: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hyperopt-platform
      component: prometheus
  template:
    metadata:
      labels:
        app: hyperopt-platform
        component: prometheus
    spec:
      serviceAccountName: hyperopt-monitoring
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=30d'
          - '--storage.tsdb.retention.size=50GB'
          - '--web.enable-lifecycle'
          - '--web.external-url=https://prometheus.hyperopt.company'
        ports:
        - containerPort: 9090
          name: web
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "8Gi"
            cpu: "2000m"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules/
        - name: prometheus-storage
          mountPath: /prometheus/
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
          items:
          - key: prometheus.yml
            path: prometheus.yml
      - name: prometheus-rules
        configMap:
          name: prometheus-config
          items:
          - key: recording_rules.yml
            path: recording_rules.yml
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: hyperopt-production
  labels:
    app: hyperopt-platform
    component: prometheus
spec:
  ports:
  - port: 9090
    targetPort: 9090
    name: web
  selector:
    app: hyperopt-platform
    component: prometheus
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage-pvc
  namespace: hyperopt-production
  labels:
    app: hyperopt-platform
    component: prometheus-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
# PostgreSQL Exporter
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: hyperopt-production
  labels:
    app: hyperopt-platform
    component: postgres-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hyperopt-platform
      component: postgres-exporter
  template:
    metadata:
      labels:
        app: hyperopt-platform
        component: postgres-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      containers:
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.12.0
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: hyperopt-config
              key: DATABASE_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hyperopt-secrets
              key: DATABASE_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: hyperopt-config
              key: DATABASE_NAME
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter
  namespace: hyperopt-production
  labels:
    app: hyperopt-platform
    component: postgres-exporter
spec:
  ports:
  - port: 9187
    targetPort: 9187
    name: metrics
  selector:
    app: hyperopt-platform
    component: postgres-exporter

---
# Redis Exporter
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-exporter
  namespace: hyperopt-production
  labels:
    app: hyperopt-platform
    component: redis-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hyperopt-platform
      component: redis-exporter
  template:
    metadata:
      labels:
        app: hyperopt-platform
        component: redis-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      containers:
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.51.0
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "redis://redis-service:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hyperopt-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-exporter
  namespace: hyperopt-production
  labels:
    app: hyperopt-platform
    component: redis-exporter
spec:
  ports:
  - port: 9121
    targetPort: 9121
    name: metrics
  selector:
    app: hyperopt-platform
    component: redis-exporter

---
# Blackbox Exporter for endpoint monitoring
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blackbox-exporter
  namespace: hyperopt-production
  labels:
    app: hyperopt-platform
    component: blackbox-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hyperopt-platform
      component: blackbox-exporter
  template:
    metadata:
      labels:
        app: hyperopt-platform
        component: blackbox-exporter
    spec:
      containers:
      - name: blackbox-exporter
        image: prom/blackbox-exporter:v0.24.0
        ports:
        - containerPort: 9115
          name: metrics
        volumeMounts:
        - name: blackbox-config
          mountPath: /config
        args:
          - '--config.file=/config/blackbox.yml'
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: blackbox-config
        configMap:
          name: blackbox-config

---
apiVersion: v1
kind: Service
metadata:
  name: blackbox-exporter
  namespace: hyperopt-production
  labels:
    app: hyperopt-platform
    component: blackbox-exporter
spec:
  ports:
  - port: 9115
    targetPort: 9115
    name: metrics
  selector:
    app: hyperopt-platform
    component: blackbox-exporter

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: blackbox-config
  namespace: hyperopt-production
  labels:
    app: hyperopt-platform
    component: blackbox-exporter
data:
  blackbox.yml: |
    modules:
      http_2xx:
        prober: http
        timeout: 5s
        http:
          valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
          valid_status_codes: [200, 201, 202, 204]
          method: GET
          follow_redirects: true
          preferred_ip_protocol: "ip4"
      
      http_post_2xx:
        prober: http
        timeout: 5s
        http:
          valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
          valid_status_codes: [200, 201, 202, 204]
          method: POST
          headers:
            Content-Type: application/json
      
      tcp_connect:
        prober: tcp
        timeout: 5s
      
      postgres_connect:
        prober: tcp
        timeout: 5s
        tcp:
          query_response:
            - expect: "^\\x00"
      
      redis_connect:
        prober: tcp
        timeout: 5s
        tcp:
          query_response:
            - send: "*1\r\n$4\r\nping\r\n"
            - expect: "^\\+PONG" 